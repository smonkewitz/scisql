<sections>

<section name="overview" title="Overview">
        <div class="section-docs">
        <p>
        sciSQL provides science-specific tools and extensions for SQL. Currently, the project contains user
        defined functions (UDFs) and stored procedures for MySQL or MariaDB in the areas of spherical
        geometry, statistics, and photometry. The project was motivated by the needs of the <a
        href="http://www.lsst.org/">Rubin Observatory Legacy Survey of Space and Time</a> (LSST) and has been
        sponsored by LSST and <a href="http://slac.stanford.edu/">SLAC</a> /
        <a href="http://www.energy.gov/">DOE</a>. sciSQL is distributed under the terms of the
        <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache License version 2.0</a>.
        </p>
        <ul>
                <li><a href="https://github.com/smonkewitz/scisql">Source code</a></li>
                <li><a href="https://github.com/smonkewitz/scisql/issues/new">Report a bug</a></li>
        </ul>
        <p>
        sciSQL is also distributed with a pair of Javascript libraries. These are:
        </p>
        <ul>
                <li>
                        <a href="http://jquery.com/">jQuery</a>, copyright John Resig and
                        dual-licensed under the <a href="http://jquery.org/license/">MIT
                        and GPL version 2 licenses</a>
                </li>
                <li>
                        <a href="http://code.google.com/p/google-code-prettify/">Google prettify</a>,
                        distributed under the <a href="http://www.apache.org/licenses/LICENSE-2.0">
                        Apache License version 2.0</a>
                </li>
        </ul>
        </div>
</section>


<section name="install" title="Build, Installation, and Deployment">
        <div class="section-docs">
        <p>
        Read on for instructions on how to configure, build, test, install and uninstall the
        sciSQL software.
        </p>
        <h3>Prerequisites</h3>
        <dl>
                <dt><a href="http://www.python.org/download/">Python 3.7.x or later</a></dt>
                <dt><a href="https://dev.mysql.com/downloads/mysql/">MySQL server 8.x</a> -or-
                  <a href="https://mariadb.com/downloads/">MariaDB server 10.x</a></dt>
                <dt><a href="https://github.com/PyMySQL/mysqlclient">mysqlclient 2.1.x or later</a></dt>
                <dd>
                        This is a Python DB API 2.0 implementation for MySQL/MariaDB, and is
                        required when running the unit tests and uninstalling sciSQL.
                </dd>
                <dt><a href="http://www.makotemplates.org/download.html">Mako 0.4 or later</a></dt>
                <dd>
                        This Python templating library is required when
                        rebuilding release documentation.
                </dd>
        </dl>
        <p>
        In order to install the UDFs, you will need write permission to the MySQL/MariaDB server
        plug-in directory, as well as a MySQL/MariaDB account with admin priviledges.
        </p>

        <h3 class="warning">Databases reserved for sciSQL use</h3>
        <p>
        The following database names are reserved for use by sciSQL:
        </p>
        <dl>
                <dt>scisql</dt>
                <dd>Contains sciSQL stored procedures.</dd>
                <dt>scisql_test</dt>
                <dd>Used by sciSQL unit tests.</dd>
                <dt>scisql_demo</dt>
                <dd>Contains sample data that can be used to exercise the sciSQL UDFs.</dd>
        </dl>
        <p>
        The scisql_demo database is dropped and re-created during installation. If you
        are using it for other things, you must migrate its contents to a different
        database prior to installing sciSQL. If you do not,
        <strong>YOU WILL LOSE DATA</strong>.
        </p>
        <p>
        Even though the scisql and scisql_test databases are never automatically
        dropped, their use is <strong>STRONGLY DISCOURAGED</strong>.
        </p>

        <h3>Build configuration</h3>
        <p>
        Run <tt>./configure</tt> from the top-level sciSQL directory. Passing <tt>--help</tt>
        will yield a list of configuration options. Here are the ones most likely to require
        tweaking if <tt>./configure</tt> doesn't work straight out of the box on your system:
        </p>
        <dl>
                <dt><tt>--mysql-dir</tt></dt>
                <dd>Set this to the top-level of the MySQL/MariaDB server install tree</dd>
                <dt><tt>--mysql-config</tt></dt>
                <dd>Point to <tt>mysql_config</tt> or <tt>mariadb_config</tt> configuration tool</dd>
                <dt><tt>--mysql-includes</tt></dt>
                <dd>Point to MySQL/MariaDB headers (<tt>mysql.h</tt> and dependents)</dd>
                <dt><tt>--scisql-prefix</tt></dt>
                <dd>
                This string will be used as a prefix for all sciSQL UDF and stored procedure
                names. You can specify an empty string, which will result in unprefixed names.
                The default is "scisql_".
                </dd>
        </dl>
        <p>
        If you wish to build/install only the sciSQL client utilities and documentation,
        run configure with the <tt>--client-only</tt> option. In this case, a MySQL/MariaDB server or
        client install is not required, the only executable generated is scisql_index
        (a utility which generates HTM indexes for tables of circles or polygons stored
        in tab-separated-value format).
        </p>

        <h3>Build</h3>
        <p>
        sciSQL is built and staged with the usual <tt>make</tt> and <tt>make install</tt>
        commands.
        </p>
        <p>
        You may wish to regenerate the HTML documentation if you've chosen a
        non-default value for <tt>--scisql-prefix</tt>, as the HTML distributed with release
        tar-balls is built under the assumption that <tt>--scisql-prefix="scisql_"</tt>.
        To do this, run <tt>make html_docs</tt>.
        </p>

        <h3>Deploying sciSQL in a MySQL/MariaDB instance</h3>
        <p> Assuming you've installed scisql in <tt>$PREFIX</tt>, update your <tt>PATH</tt> and
        <tt>PYTHONPATH</tt> as described below:
        <example lang="bash">
export PATH="&#36;PREFIX/bin:&#36;PATH"
export PYTHONPATH="&#36;PREFIX/python:&#36;PATH"</example>
        Check that you have access to a local server instance and run <tt>scisql-deploy.py</tt>. Passing
        <tt>--help</tt> will yield a list of configuration options. Here are the ones most likely to require
        tweaking:
        </p>
        <dl>
                <dt><tt>--mysql-user</tt></dt>
                <dd>Set this to the name of a MySQL/MariaDB admin user; defaults to <tt>root</tt></dd>
                <dt><tt>--mysql-bin</tt></dt>
                <dd>Point to the <tt>mysql</tt> or <tt>mariadb</tt> command-line client</dd>
                <dt><tt>--mysql-socket</tt></dt>
                <dd>Point to the MySQL/MariaDB server UNIX socket file</dd>
                <dt><tt>--verbose</tt></dt>
                <dd>Verbosity level; possible value are FATAL, ERROR, WARN, INFO, DEBUG</dd>
        </dl>
        <p>
        You will be prompted for the MySQL/MariaDB admin user password during configuration.
        If you run <tt>scisql-deploy.py</tt> in a script, you can
        use standard input, for example via a pipe, for providing this password.
        Connection details, including this password, are stored in a temporary directory in a file named
        <tt>my-client.cnf</tt> using the MySQL options file format. This temporary file is removed at the end
        of the process, unless you set the verbose level to DEBUG.
        </p>
        <p>
        The <tt>scisql-deploy.py</tt> command will CREATE the sciSQL UDFs, stored procedures, and
        databases (including the scisql_demo database). It will also automatically
        run the sciSQL integration tests, which check that sciSQL is correctly deployed.
        You can re-run the tests anytime by invoking <tt>scisql-deploy.py</tt> with the 
        <tt>--test</tt> option.
        </p>
        <p>
        Finally, note that after installation each UDF will be available under two
        names: one including a version number and one without. For example, assuming
        that <tt>--scisql-prefix="foo_"</tt> and that the sciSQL version number is
        <tt>1.2.3</tt>, a hypothetical UDF named <tt>bar</tt> would be available as:
        </p>
        <ul><li>foo_bar</li><li>foo_bar_1_2_3</li></ul>
        <p>
        Invoking <tt>scisql-deploy.py</tt> with the <tt>--undeploy</tt> option
        will drop the versioned sciSQL UDFs and stored
        procedures. It will also drop the unversioned UDFs/procedures, but only
        if the unversioned UDF/procedure was created by the version of
        sciSQL being uninstalled. As a consequence, it is possible to have
        multiple versions of sciSQL installed at the same time, and the behavior
        of two versions can be compared from within a single MySQL/MariaDB instance.
        An unversioned name will resolve to the most recently installed versioned
        name.
        </p>
        <p>
        An updeploy will also drop the scisql_demo database.
        </p>

        <h3>Rebuilding sciSQL</h3>
        <p>
        If you've already installed sciSQL, say using a UDF/procedure name
        prefix of "foo_", and then decide you'd like to change the prefix to "bar_",
        do the following from the top-level sciSQL directory:
        </p>
        <dl>
        <dt><tt>scisql-deploy.py ... --undeploy</tt></dt><dd>Uninstalls the UDFs and stored procedures named <tt>foo_*</tt>.</dd>
        <dt><tt>make distclean</tt></dt><dd>Removes all build products and configuration files.</dd>
        <dt><tt>configure --scisql-prefix=bar_ ...</tt></dt><dd>Reconfigures sciSQL (sets new name prefix).</dd>
        <dt><tt>make</tt></dt><dd>Rebuilds sciSQL.</dd>
        <dt><tt>make install</tt></dt><dd>Restages sciSQL.</dd>
        <dt><tt>scisql-deploy.py ...</tt></dt><dd>Redeploys sciSQL</dd>
        </dl>
        <p>
        No MySQL/MariaDB restart is required. Note that multiple installations of the same
        version of sciSQL with different UDF/procedure name prefixes can coexist on
        a single MySQL/MariaDB instance.
        </p>

        <h3>MySQL/MariaDB server restarts</h3>
        <p>
        Installing different versions of sciSQL, or multiple copies of the same
        version with different UDF/procedure name prefixes, does not require a
        server restart.
        </p>
        <p>
        Only sciSQL developers should need to perform restarts. They are
        required when changing the name of a UDF without changing the name of the
        shared library installed into the server plugin directory. In this case,
        an attempt to install the updated shared library will sometimes result in
        MySQL/MariaDB reporting that it cannot find symbol names that are actually
        present. This is presumably due to server and/or OS level caching
        effects, and restarting the server resolves the problem.
        </p>

        <h3>Reporting bugs and getting help</h3>
        <p>
        If you encounter test-case failures, or think you've identified a
        bug in the sciSQL code, or would just like to ask a question, please
        <a href="https://github.com/smonkewitz/scisql/issues">submit an issue</a>.
        </p>
        </div>
</section>


<section name="s2" title="Spherical Geometry">
        <div class="section-docs">
        <p>
                The aim of the spherical geometry UDFs and stored procedures is to
                allow quick answers to the following sorts of questions:
        </p>
        <ol>
                <li>
                <em>Which points in a table lie inside a region on the sphere?</em> For example,
                an astronomer might wish to know which stars and galaxies lie inside the
                region of the sky observed by a single camera CCD.
                </li>
                <li>
                <em>Which spherical regions in a table contain a particular point?</em> For
                example, an astronomer might with to know which telescope images overlap
                the position of interesting object X.
                </li>
        </ol>

        <h3>HTM indexing</h3>
        <p>
                To accelerate these types of queries, sciSQL maps points/regions
                to the integer ID(s) of their containing/overlapping triangles in a
                Hierarchical Triangular Mesh (HTM). This is a decomposition of the
                unit sphere defined by A. Szalay, T. Budavari, G. Fekete at the
                Johns Hopkins University, and Jim Gray, Microsoft Research. See
                the following links for more information:
        </p>
        <ul>
                <li><a href="http://voservices.net/spherical/">http://voservices.net/spherical/</a></li>
                <li><a href="http://adsabs.harvard.edu/abs/2010PASP..122.1375B">http://adsabs.harvard.edu/abs/2010PASP..122.1375B</a></li>
        </ul>
        <p>
                To accelerate spatial queries, standard B-tree indexes are created
                on the point/region HTM IDs and spatial constraints are expressed
                in terms of those IDs. This allows the database optimizer to restrict
                the rows that must be considered by a spatial query.
        </p>
        <p>
                Read on to learn how to create and take advantage of HTM indexes on
                tables containing spatial data. The examples below can be run in the
                scisql_demo database, which contains all of the referenced tables
                and a tiny amount of sample data.
        </p>

        <h3>Supported region types</h3>
        <p>
                sciSQL supports 4 kinds of regions: longitude/latitude angle boxes,
                spherical circles (defined by a center and opening angle), spherical
                ellipses (the orthographic projection of a standard 2-d ellipse onto
                the sphere, where the 2-d ellipse is on a plane tangent to the unit
                sphere at the ellipse center), and spherical convex polygons (where
                polygon edges are great circles). Note also that spherical convex
                polygons have a binary representation, produced by
                ${SCISQL_PREFIX}s2CPolyToBin(), allowing them to be stored as values
                in a BINARY table column.
        </p>

        <h3>Points-in-region queries</h3>
        <p>
                sciSQL contains several UDFs for checking whether a point lies inside
                a region. These are: ${SCISQL_PREFIX}s2PtInBox(),
                ${SCISQL_PREFIX}s2PtInCircle(), ${SCISQL_PREFIX}s2PtInCPoly() and
                ${SCISQL_PREFIX}s2PtInEllipse(). They return 1 if the input point is
                inside the input region and 0 otherwise.
        </p>
        <p>
                Given these UDFs, a simple way to answer question 1 is illustrated by
                the following example:
        </p>
        <example>
SELECT objectId
    FROM Object
    WHERE ${SCISQL_PREFIX}s2PtInCircle(ra_PS, decl_PS, 0, 0, 0.01) = 1;</example>
        <p>
                This query returns all the objects within 0.01 degrees of
                (RA, Dec) = (0, 0). It is inefficient for small search regions
                because the ${SCISQL_PREFIX}s2PtInCircle() UDF must be called for
                every row in the <tt>Object</tt> table.
        </p>
        <p>
                Lets assume that <tt>Object</tt> contains an indexed BIGINT column
                named <tt>htmId20</tt>. If it does not, the column and index can be
                added with ALTER TABLE. <tt>htmId20</tt> can be populated with the
                subdivision-level 20 HTM IDs of object positions as follows:
        </p>
        <example>
ALTER TABLE Object DISABLE KEYS;
UPDATE Object
    SET htmId20 = ${SCISQL_PREFIX}s2HtmId(ra_PS, decl_PS, 20);
ALTER TABLE Object ENABLE KEYS;</example>
        <p>
                The HTM subdivision level must be between 0 and 24. At subdivision
                level N, there are 8*4<sup>N</sup> triangles in the mesh, so the
                higher subdivision levels correspond to finer tesselations of the
                unit sphere.
        </p>
        <p>
                Now that HTM IDs for object positions are available and indexed,
                the query above can be made more efficient:
        </p>
        <example>
CALL scisql.${SCISQL_PREFIX}s2CircleRegion(0, 0, 0.01, 20);

SELECT o.objectId
    FROM Object AS o INNER JOIN scisql.Region AS r
         ON (o.htmId20 BETWEEN r.htmMin AND r.htmMax)
    WHERE ${SCISQL_PREFIX}s2PtInCircle(o.ra_PS, o.decl_PS, 0, 0, 0.01) = 1;</example>
        <p>
                What's going on here? The first line in the example calls the
                ${SCISQL_PREFIX}s2CircleRegion() stored procedure. This procedure
                creates a temporary table called <tt>scisql.Region</tt> with two
                BIGINT NOT NULL columns named htmMin and htmMax. It then stores
                the HTM IDs overlapping the search region in <tt>scisql.Region</tt>
                (as ranges).
        </p>
        <p>
                Next, the original query is augmented with a join against
                <tt>scisql.Region</tt>. This limits the objects considered by
                ${SCISQL_PREFIX}s2PtInCircle() to those within the HTM triangles
                overlapping the search region; the index on htmId20 allows MySQL to
                retrieve these objects very quickly when the search region is small.
                Note that if the search region is large (meaning that a large fraction
                of the table being searched is inside the search region), then the
                original query may actually be faster.
        </p>
        <p>
                Here is another example, this time with a search region taken from
                a table called <tt>Science_Ccd_Exposure</tt>. This table includes a
                a column named <tt>poly</tt> that contains polygonal approximations
                to the regions of the sphere observed by CCD exposures.
        </p>
        <example>
SELECT poly FROM Science_Ccd_Exposure
    WHERE scienceCcdExposureId = 43856062009
    INTO @poly;

CALL scisql.${SCISQL_PREFIX}s2CPolyRegion(@poly, 20);

SELECT o.objectId
    FROM Object AS o INNER JOIN scisql.Region AS r
         ON (o.htmId20 BETWEEN r.htmMin AND r.htmMax)
    WHERE ${SCISQL_PREFIX}s2PtInCPoly(o.ra_PS, o.decl_PS, @poly) = 1;</example>
        <p>
                The first statement stores the polygonal boundary of a particular CCD
                exposure into the user variable <tt>@poly</tt>, the second computes
                overlapping HTM IDs, and the third performs the points-in-region
                query as before.
        </p>

        <h3>Regions-containing-point queries</h3>
        <p>
                An example for this type of query is:
        </p>
        <example>
SELECT scienceCcdExposureId FROM Science_Ccd_Exposure
    WHERE ${SCISQL_PREFIX}s2PtInCPoly(0, 0, poly) = 1;</example>
        <p>
                This query returns all the CCD exposures containing the point
                (RA, Dec) = (0, 0). To accelerate it using HTM indexing, an
                auxiliary table is introduced:
        </p>
        <example test="false">
CREATE TABLE Science_Ccd_Exposure_HtmId10 (
    scienceCcdExposureId BIGINT  NOT NULL,
    htmId10              INTEGER NOT NULL,
    PRIMARY KEY (htmId10, scienceCcdExposureId),
    KEY (scienceCcdExposureId)
);</example>
        <p>
                <tt>Science_Ccd_Exposure_HtmId10</tt> will store the level 10 HTM ID
                of every triangle overlapping a CCD exposure. To populate it, start
                by dumping the primary key and polygon vertex colunms from
                <tt>Science_Ccd_Exposure</tt>:
        </p>
        <example lang="bash">
rm -f /tmp/scisql_demo_ccds.tsv</example>
        <example>
SELECT scienceCcdExposureId,
       llcRa, llcDecl,
       ulcRa, ulcDecl,
       urcRa, urcDecl,
       lrcRa, lrcDecl
    FROM Science_Ccd_Exposure
    INTO OUTFILE '/tmp/scisql_demo_ccds.tsv';</example>
        <p>
                Then, run the sciSQL region indexing utility:
        </p>
        <example lang="bash">
sudo chmod a+r /tmp/scisql_demo_ccds.tsv
scisql_index -l 10 /tmp/scisql_demo_htmid10.tsv /tmp/scisql_demo_ccds.tsv</example>
        <p>
                and load the results:
        </p>
        <example>
TRUNCATE TABLE Science_Ccd_Exposure_HtmId10;
LOAD DATA LOCAL INFILE '/tmp/scisql_demo_htmid10.tsv' INTO TABLE Science_Ccd_Exposure_HtmId10;</example>
        <p>
                The example regions-containing-point query can now be expressed
                more efficiently as:
        </p>
        <example>
SELECT sce.scienceCcdExposureId
    FROM Science_Ccd_Exposure AS sce, (
             SELECT scienceCcdExposureId
             FROM Science_Ccd_Exposure_HtmId10
             WHERE htmId10 = ${SCISQL_PREFIX}s2HtmId(0, 0, 10)
         ) AS h
    WHERE sce.scienceCcdExposureId = h.scienceCcdExposureId AND
          ${SCISQL_PREFIX}s2PtInCPoly(0, 0, sce.poly) = 1;</example>
        </div>
</section>


<section name="photometry" title="Photometry">
        <div class="section-docs"><p>
        These UDFs provide conversions between raw fluxes, calibrated (AB) fluxes
        and AB magnitudes.
        </p></div>
</section>


<section name="statistics" title="Statistics">
        <div class="section-docs"><p>
        These UDFs provide the ability to compute medians and percentiles. Averages and
        standard deviations can already be computed with the AVG and STDDEV SQL constructs.
        </p></div>
</section>


<section name="misc" title="Miscellaneous">
        <div class="section-docs"><p>
        These UDFs and stored procedures are either administrative, internal, or
        informational - they are not directly useful for scientific computation / queries.
        </p></div>
</section>

</sections>
